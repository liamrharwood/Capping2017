###############################
#							  #
# API End Point Documentation #
#							  #
###############################

-------------------------------

GET /search

Query Param: q

Returns search results for the given query "q"

{
	users: []
	communities: []
	posts: []
}

-------------------------------

GET /posts 

Optional Query Params: post_id, user_id, community_id, callDate, startNum, endNum

# Returns information for post feed.
# If post id is specified, ignore all other params and just return that one post
# If a community id is specified, it returns all posts from that community.
# If not, but basic auth is used, it returns all followed posts for the auth'd user.
# If no basic auth is used, it returns all posts.
# callDate is the time of the first call on the page
# startNum is the index of the first result to get, while endNum is index of the last result to get (for pagination)

[
	{
		userId:
		username:
		title:
		bodyText:
		upvotes:
		downvotes:
		createDate:
		completed:
	},
	{
		...
	}
]

-------------------------------

GET /posts/comments

Query Param: post_id

# Get list of comments for specified post

[
	{
		id:
		userId:
		username:
		postId:
		bodyText:
		createDate:
	},
	{
		...
	}
]

-------------------------------

GET /posts/updates

Query Param: post_id

# Get list of updates for specified post

[
	{
		id:
		postId:
		bodyText:
	},
	{
		...
	}
]



-------------------------------

POST /posts/comments

# Create new comment

Request Body:
{
	postId:
	bodyText:
}

-------------------------------

POST /posts/reports

# Report a post, requires authentication

Request Body:
{
	postId:
	reportReason:
}

-------------------------------

POST /posts/vote

# submit or remove a vote from a given post

Request Body:
{
	postId:
	vote: (1 = upvote, 0 = unvote, -1 = downvote)
}

-------------------------------

POST /posts

# creates a new post 

Request Body:
{
	title:
	bodyText:
	imgPath:
	communityIds: [communityId]
}

-------------------------------

POST /posts/updates

# Create a post update, specifying whether the post should be marked as complete (true or false)

Request Body:
{
	postId:
	reportReason:
	complete:
}

-------------------------------

GET /users/profile

optional parameters: user_id

# Returns user profile info
# If auth'd, "following" is a boolean value which states whether the auth'd user follows the owner of the profile

{
	userId:
	username:
	firstName:
	lastName:
	followersCount:
	followedCommunitiesCount:
	followedUsersCount:
	bio:
	profileImagePath:
	postCount:
	following:
	prayPoints:
	answeredPoints:
	reportPoints:
	upvotePoints:
	overallReputationPoints:
}

-------------------------------

POST /users/register

# Registers a new user

Request Body:
{
	username:
	password:
	firstName:
	lastName:
	email:
	birthDate:	
}

-------------------------------

POST /users/login

# Logs a user in by giving them an access token
# Hit the endpoint with Basic Auth and it will return a token if valid

Response:
{
	username:
	token:
	id:
}
-------------------------------

POST /users/login

# Logs a user out by nullifying their access token
# Hit the endpoint with Basic Auth and it will invalidate their token

-------------------------------

POST /users/images

# Upload a profile image for auth'd user
# DOES NOT TAKE JSON! Takes multipart form data with file and filename

Request ("multipart/form-data"):
file : [file to be uploaded]
fileName : [name of the file (will be made unique server-side)]


-------------------------------

PUT /users/follow
PUT /users/unfollow

Query Param: user_id

# Follow or unfollow the specified user for the auth'd user

-------------------------------

PUT /users/settings

# Update settings for auth'd user

Request Body:
{
	username:
	firstName:
	lastName:
	email:
	bio:
}

-------------------------------

PUT /users/settings/password

# Change the auth'd user's password

Request Body (plaintext, not JSON):

[new password]

-------------------------------

GET /communities

# fetch communities followed by the auth'd user

Response Body:
[
	{
		communityId:
		name:
		description:
		verified:
		createDate:
		banStatus:
	},
	{
		...
	}
]

-------------------------------

POST /communities

# Create new community with auth'd user as moderator

Request Body:
{
	name:
	description
}

-------------------------------

GET /communities/profile?id=[communityId]

# fetch profile data for a given community
# If auth'd, "following" is a boolean value denoting if the auth'd user is following that community

Response Body:
{
	id:
	name:
	description:
	followerCount:
	postCount:
	following:
	moderating:
}

--------------------------------

PUT /communities/follow
PUT /communities/unfollow

Query Param: community_id

# Follow or unfollow the specified community for the auth'd user

--------------------------------

GET /moderators/reports

Query Param: community_id

# Get list of reports for specified community (must be auth'd as a moderator for that community)

--------------------------------

DELETE /moderators/posts

Query Params: post_id, community_id

# Delete a post from a community (must be auth'd as a moderator for that community)
