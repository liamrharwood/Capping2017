###############################
#							  #
# API End Point Documentation #
#							  #
###############################



GET /posts 

Optional Query Params: post_id, user_id, community_id, callDate, startNum, endNum

# Returns information for post feed.
# If post id is specified, ignore all other params and just return that one post
# If a community id is specified, it returns all posts from that community.
# If not, but basic auth is used, it returns all followed posts for the auth'd user.
# If no basic auth is used, it returns all posts.

[
	{
		userId:
		username:
		title:
		bodyText:
		upvotes:
		downvotes:
		createDate:
		completed:
	},
	{
		...
	}
]

-------------------------------

GET /posts/comments

Query Param: post_id

# Get list of comments for specified post

[
	{
		id:
		userId:
		username:
		postId:
		bodyText:
		createDate:
	},
	{
		...
	}
]

-------------------------------

POST /posts/comments

# Create new comment

Request Body:
{
	postId:
	bodyText:
}

-------------------------------

POST /posts/vote

# submit or remove a vote from a given post

Request Body:
{
	postId:
	vote: (1 = upvote, 0 = unvote, -1 = downvote)
}

-------------------------------

POST /posts

# creates a new post 

Request Body:
{
	title:
	userId:
	bodyText:
	imgPath:
	communityIds: [communityId]
}

-------------------------------

GET /users/profile

optional parameters: user_id

# Returns user profile info

{
	userId:
	userName:
	firstName:
	lastName:
	followersCount:
	followedCommunitiesCount:
	followedUsersCount:
	bio:
	profileImagePath:
	postCount:
}

-------------------------------

POST /users/register

# Registers a new user

Request Body:
{
	username:
	password:
	firstName:
	lastName:
	email:
	birthDate:	
}

-------------------------------

PUT /users/follow
PUT /users/unfollow

Query Param: user_id

# Follow or unfollow the specified user for the auth'd user

-------------------------------

GET /communities

# fetch communities followed by the auth'd user

Response Body:
[
	{
		communityId:
		name:
		description:
		verified:
		createDate:
		banStatus:
	},
	{
		...
	}
]

-------------------------------

GET /communities/profile?id=[communityId]

# fetch profile data for a given community

Response Body:
{
	id:
	name:
	description:
	followerCount:
	postCount:
}

--------------------------------

PUT /communities/follow
PUT /communities/unfollow

Query Param: community_id

# Follow or unfollow the specified community for the auth'd user

--------------------------------